# -*- coding: utf-8 -*-
"""Task 1 (Supervised Learning).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xOhICl9SRnB9bdki71BStDue6ttzFI_z

#PREDICTION USING SUPERVISED ML
OBJECTIVE


> *Predict the percentage of a student based on the no. of study hours*

SIMPLE LINEAR REGRESSION

> *Linear Regression is a way to explain the relationship between dependent variable and one or more explanatory variable using a straight line.*

> y = mx + c

*   y - criterion variable
*   x - predictor variable
*   c - constant/intercept
*   m - regression coefficient

---

Author ~ *Aswathy Chandrasekar*
 
 ---

###*Importing Libraries*
"""

# Commented out IPython magic to ensure Python compatibility.
## Importing required libraries

import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

"""### - *Load Dataset*"""

## Loading dataset
url = 'http://bit.ly/w-data'
data = pd.read_csv(url)

"""### - *Summarize Dataset*"""

#Retrieves the first five records from the dataset. 
data.head()

#Retrieves the last five records from the dataset. 
data.tail()

"""### - *Basic Exploratory Data Analysis (EDA)*"""

#returns the total number of rows and columns
data.shape

# returns the column attributes
data.columns

# returns the datatypes 
data.dtypes

# returns the information about dataset
data.info()

#returns the statistical info.
data.describe().transpose()

#Checks for null values if any
data.isnull().sum()

#Checks for duplicates values if any
data.duplicated().sum()

"""*From the above, it's clear that there are no NULL and DUPLICATE values and hence we can interpret that the given dataset is clean.*"""

sns.heatmap(data.corr(),annot=True)

"""*From the Heatmap, it is clear that there exists high positive corelation between the varibles.*

### - *Data Visualization*
"""

sns.set_style('darkgrid')
sns.scatterplot(x = data['Hours'], y = data['Scores'])
plt.title('Scores vs Study Hours', size = 18)
plt.ylabel('Marks Percentage', size = 12, color = 'brown')
plt.xlabel('Hours Studies', size = 12, color = 'brown')
plt.show()

"""*From the above scatter plot, it is clear that there is a linear relationship between Study hours and Scores. Hence we can interpret that we can implement a regression model.*

### - *Segregate Dataset into X(Input/IndependentVariable) & Y(Output/DependentVariable)*
"""

X= data.iloc[:, :-1].values  
Y =data.iloc[:, 1].values

"""### - *Splitting Dataset into Train & Test*"""

X_train, X_test, y_train, y_test = train_test_split(X, Y,test_size=0.2, random_state=0)

"""### - *Model Building*



"""

model = LinearRegression()  
model.fit(X_train, y_train)
print('-- MODEL TRAINED --')

# Intercept and slope of the regrssion line
print('Intercept: ',model.intercept_)
print('Coefficient: ', model.coef_)

#Regression Plot
sns.regplot(x = data['Hours'], y = data['Scores'])
plt.scatter(X_train, y_train, label = "Train data", color = 'blue')
plt.scatter(X_test, y_test, label = "Test data", color = 'red')
plt.title('Study Hours vs Scores', size = 18)
plt.ylabel('Marks Percentage', size = 12, color = 'brown')
plt.xlabel('Hours Studies', size = 12, color = 'brown')
plt.grid(True)
plt.legend()
plt.show()

"""*From the above graph, it is confirmed that the variables are positively correlated.*

### - *Prediction for all Test Data*
"""

y_pred = model.predict(X_test)
prediction = pd.DataFrame({'Hours': [i[0] for i in X_test], 'Predicted Marks': [x for x in y_pred]})
prediction

"""### - *Comparison between Actual Marks and Predicted marks*"""

compare = pd.DataFrame({'Actual Marks': y_test, 'Predicted Marks': y_pred})
compare

"""### - *Visualization of the Compared Data*"""

plt.scatter( x = X_test, y= y_test, color = 'purple')
plt.plot(X_test, y_pred, color = 'green')
plt.title('Actual vs Predicted', size = 20, color = 'brown')
plt.ylabel('Marks Percentage', size = 14)
plt.xlabel('Study Hours', size = 14)
plt.show()

"""### - *Evaluating the Model*"""

#Calculating the accuracy of the model
print('Mean absolute error: ', metrics.mean_absolute_error(y_test, y_pred))

"""*The smaller the mean absolute error value, the lesser the chance of error or wrong forecasting through the model.*

### - *What will be predicted score if a student studies for 9.25 hrs/ day?*
"""

hours = [9.25]
result = model.predict([hours])
print('Predicted Score: {}'.format(round(result[0], 2)))

"""


*   ### *Hence, if a student studies for 9.25 hrs/ day, he/she is likely to score 93.69 marks.*


 




"""